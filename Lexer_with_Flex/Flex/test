;; This is example g++ code to test lexer: COMMENT
(: OP_OP
load: KW_LOAD
": OP_OC
filename: VALUESTR
": OP_CC
): OP_CP
(: OP_OP
deffun: KW_DEFFUN
example_function: IDENTIFIER
(: OP_OP
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
(: OP_OP
set: KW_SET
sum: IDENTIFIER
(: OP_OP
+: OP_PLUS
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
): OP_CP
(: OP_OP
set: KW_SET
substract: IDENTIFIER
(: OP_OP
-: OP_MINUS
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
): OP_CP
(: OP_OP
set: KW_SET
divide: IDENTIFIER
(: OP_OP
/: OP_DIV
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
): OP_CP
(: OP_OP
set: KW_SET
product: IDENTIFIER
(: OP_OP
*: OP_MULT
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
): OP_CP
(: OP_OP
set: KW_SET
power: IDENTIFIER
(: OP_OP
**: OP_DBLMULT
param1: IDENTIFIER
param2: IDENTIFIER
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
equal: KW_EQUAL
(: OP_OP
equal: KW_EQUAL
param1: IDENTIFIER
20: VALUEI
): OP_CP
true: KW_TRUE
): OP_CP
(: OP_OP
disp: KW_DISP
": OP_OC
param1 is 20: VALUESTR
": OP_CC
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
equal: KW_EQUAL
(: OP_OP
equal: KW_EQUAL
param1: IDENTIFIER
20: VALUEI
): OP_CP
false: KW_FALSE
): OP_CP
(: OP_OP
disp: KW_DISP
": OP_OC
param1 is not 20: VALUESTR
": OP_CC
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
not: KW_NOT
(: OP_OP
equal: KW_EQUAL
param1: IDENTIFIER
20: VALUEI
): OP_CP
): OP_CP
(: OP_OP
disp: KW_DISP
": OP_OC
param1 is not 20: VALUESTR
": OP_CC
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
and: KW_AND
(: OP_OP
equal: KW_EQUAL
param1: IDENTIFIER
20: VALUEI
): OP_CP
(: OP_OP
equal: KW_EQUAL
param2: IDENTIFIER
20: VALUEI
): OP_CP
): OP_CP
(: OP_OP
disp: KW_DISP
": OP_OC
param1 and param2 are 20: VALUESTR
": OP_CC
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
or: KW_OR
(: OP_OP
equal: KW_EQUAL
param1: IDENTIFIER
20: VALUEI
): OP_CP
(: OP_OP
equal: KW_EQUAL
param2: IDENTIFIER
20: VALUEI
): OP_CP
): OP_CP
(: OP_OP
disp: KW_DISP
": OP_OC
param1 or param2 is 20: VALUESTR
": OP_CC
): OP_CP
): OP_CP
(: OP_OP
set: KW_SET
liste1: IDENTIFIER
nil: KW_NIL
): OP_CP
(: OP_OP
append: KW_APPEND
liste1: IDENTIFIER
4: VALUEI
): OP_CP
(: OP_OP
set: KW_SET
liste2: IDENTIFIER
(: OP_OP
list: KW_LIST
1: VALUEI
2: VALUEI
3: VALUEI
): OP_CP
): OP_CP
(: OP_OP
concat: KW_CONCAT
liste1: IDENTIFIER
liste2: IDENTIFIER
): OP_CP
(: OP_OP
set: KW_SET
a: IDENTIFIER
123f456: VALUEF
): OP_CP
(: OP_OP
set: KW_SET
i: IDENTIFIER
10: VALUEI
): OP_CP
(: OP_OP
for: KW_FOR
(: OP_OP
set: KW_SET
i: IDENTIFIER
(: OP_OP
-: OP_MINUS
i: IDENTIFIER
1: VALUEI
): OP_CP
): OP_CP
(: OP_OP
if: KW_IF
(: OP_OP
less: KW_LESS
i: IDENTIFIER
1: VALUEI
): OP_CP
(: OP_OP
exit: KW_EXIT
): OP_CP
): OP_CP
): OP_CP
): OP_CP